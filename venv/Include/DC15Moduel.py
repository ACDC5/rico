import hello #该模块需放在和调用模块的同一级
a = hello.hi() #指定模块名再调用函数
print(a)


#--------------------------------------------------------
# 模块的三种导入方式
import DC15v1 #第一种导入模块的方式
print('32摄氏度 = %.2f华氏度' % DC15v1.c2f(32)) #需写入全命名空间
print('99华氏度 = %.2f摄氏度'% DC15v1.f2c(99))

from DC15v1 import c2f,f2c #第二种导入模块的方式,在import后面可以直接用*号通配符导入模块中过的所有命名空间
print('31摄氏度 = %.2f华氏度' % c2f(31)) #无需写入全命名空间
print('98华氏度 = %.2f摄氏度'%  f2c(98))

import DC15v1 as myRico #第三种导入模块的方式,自定义一个名称来代表命名空间
print('29摄氏度 = %.2f华氏度' % myRico.c2f(29)) #
print('80华氏度 = %.2f摄氏度'%  myRico.f2c(80))

print(__name__) #输出的值将是__main__,因为当前模块是以程序运行的
print(myRico.__name__) #输出name的属性值是被导入模块的名字,说明模块是被导入的
if __name__ != 'DC15v1': #当模块以程序运行时 __name__属性的值将等于__main__,当模块是被导入到其他程序时__name__属性的值是当前模块的名称
    myRico.test()
    print('我在哪')


#-----------------------------------------------------------
##搜索路径 include
#场景写好的模块应该放在什么地方
#一般来说导入的模块最好放在项目的Lib\site-package中
import sys
print(sys.path)#以列表的形式返回系统的搜索路径,可以使用列表函数append向系统路径添加新值
print(sys.path.append('新路径名'))

#包(Package)和java的包概念相似,都是为了方便管理代码
#step1 创建一个文件夹,用于存放相关的模块,文件夹的名字即包的名字
#step2 在文件夹中创建一个__init__.py的模块文件,内容可以为空

#导入包中的模块语法为:包名.模块名


#------------------------------------------------------------
#dir(模块名)查看模块的属性
# 模块名.__all__ 以列表的形式查看该模块可供外界调用的东西,并不是所有模块都有all属性
#__file__属性可以查看源代码所在的位置
